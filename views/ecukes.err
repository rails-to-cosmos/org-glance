  expand-file-name(nil)
  find-file-noselect(nil nil nil nil)
  find-file(nil)
  (lambda (filename) (find-file (gethash filename org-glance-test-files)))("views/apple.org")
  apply((lambda (filename) (find-file (gethash filename org-glance-test-files))) "views/apple.org")
  ecukes-run-step(#s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil))
  #[(step) "\10@\11\232\306\10!\11\232\32\211\33\203\25\0\307\310\11\f#\210\n\203\37\0\307\311\11\f#\210\307\312\11\f#\210\15\2036\0\313\11!\211\25\2048\0\314\24\2028\0\315\24\316\11!\16\35>\204H\0\317\320\321\11D\"\210\11\211\36\36\322\fI\210)\13\203[\0\307\323\11\f#\210\n\203e\0\307\324\11\f#\210\f\325\267\202\211\0\326 \210\307\327\11\"\210\202\211\0\330 \210\307\331\11\"\210\202\211\0\332 \210\307\333\11\"\210\307\334\11\f#*\207" [steps step last first status success -last-item run-hook-with-args ecukes-reporter-before-first-step-hook ecukes-reporter-before-last-step-hook ecukes-reporter-before-step-hook ecukes-run-step failure skipped type-of signal wrong-type-argument ecukes-step 7 ecukes-reporter-after-first-step-hook ecukes-reporter-after-last-step-hook #s(hash-table size 3 test eq rehash-size 1.5 rehash-threshold 0.8125 purecopy t data (success 107 failure 118 skipped 129)) ecukes-stats-step-pass ecukes-reporter-after-step-success-hook ecukes-stats-step-fail ecukes-reporter-after-step-failed-hook ecukes-stats-step-skip ecukes-reporter-after-step-skipped-hook ecukes-reporter-after-step-hook cl-struct-ecukes-step-tags v] 5](#s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil))
  mapc(#[(step) "\10@\11\232\306\10!\11\232\32\211\33\203\25\0\307\310\11\f#\210\n\203\37\0\307\311\11\f#\210\307\312\11\f#\210\15\2036\0\313\11!\211\25\2048\0\314\24\2028\0\315\24\316\11!\16\35>\204H\0\317\320\321\11D\"\210\11\211\36\36\322\fI\210)\13\203[\0\307\323\11\f#\210\n\203e\0\307\324\11\f#\210\f\325\267\202\211\0\326 \210\307\327\11\"\210\202\211\0\330 \210\307\331\11\"\210\202\211\0\332 \210\307\333\11\"\210\307\334\11\f#*\207" [steps step last first status success -last-item run-hook-with-args ecukes-reporter-before-first-step-hook ecukes-reporter-before-last-step-hook ecukes-reporter-before-step-hook ecukes-run-step failure skipped type-of signal wrong-type-argument ecukes-step 7 ecukes-reporter-after-first-step-hook ecukes-reporter-after-last-step-hook #s(hash-table size 3 test eq rehash-size 1.5 rehash-threshold 0.8125 purecopy t data (success 107 failure 118 skipped 129)) ecukes-stats-step-pass ecukes-reporter-after-step-success-hook ecukes-stats-step-fail ecukes-reporter-after-step-failed-hook ecukes-stats-step-skip ecukes-reporter-after-step-skipped-hook ecukes-reporter-after-step-hook cl-struct-ecukes-step-tags v] 5] (#s(ecukes-step "Given store \"Phones\" in directory \"store/phones\" with headlines" "Given" "store \"Phones\" in directory \"store/phones\" with headlines" "* iPhone 3 :Apple:\n* iPhone 7 :Apple:\n* Йотафон :Trash:" py-string nil success) #s(ecukes-step "When I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" "When" "I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" nil regular nil success) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "And I go to headline \"iPhone 3\"" "And" "I go to headline \"iPhone 3\"" nil regular nil nil) #s(ecukes-step "And I set title of headline at point to \"iPhone 4\"" "And" "I set title of headline at point to \"iPhone 4\"" nil regular nil nil) #s(ecukes-step "Then 1 marker should be changed" "Then" "1 marker should be changed" nil regular nil nil) #s(ecukes-step "When I commit changes" "When" "I commit changes" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should contain headline \"iPhone 4\" in committed layer" "Then" "store \"Phones\" should contain headline \"iPhone 4\" in committed layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"Йотафон\" in staging layer" "And" "store \"Phones\" should not contain headline \"Йотафон\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should be equal to buffer store" "And" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil) #s(ecukes-step "When I kill current buffer" "When" "I kill current buffer" nil regular nil nil) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should be equal to buffer store" "Then" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil)))
  -each((#s(ecukes-step "Given store \"Phones\" in directory \"store/phones\" with headlines" "Given" "store \"Phones\" in directory \"store/phones\" with headlines" "* iPhone 3 :Apple:\n* iPhone 7 :Apple:\n* Йотафон :Trash:" py-string nil success) #s(ecukes-step "When I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" "When" "I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" nil regular nil success) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "And I go to headline \"iPhone 3\"" "And" "I go to headline \"iPhone 3\"" nil regular nil nil) #s(ecukes-step "And I set title of headline at point to \"iPhone 4\"" "And" "I set title of headline at point to \"iPhone 4\"" nil regular nil nil) #s(ecukes-step "Then 1 marker should be changed" "Then" "1 marker should be changed" nil regular nil nil) #s(ecukes-step "When I commit changes" "When" "I commit changes" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should contain headline \"iPhone 4\" in committed layer" "Then" "store \"Phones\" should contain headline \"iPhone 4\" in committed layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"Йотафон\" in staging layer" "And" "store \"Phones\" should not contain headline \"Йотафон\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should be equal to buffer store" "And" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil) #s(ecukes-step "When I kill current buffer" "When" "I kill current buffer" nil regular nil nil) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should be equal to buffer store" "Then" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil)) #[(step) "\10@\11\232\306\10!\11\232\32\211\33\203\25\0\307\310\11\f#\210\n\203\37\0\307\311\11\f#\210\307\312\11\f#\210\15\2036\0\313\11!\211\25\2048\0\314\24\2028\0\315\24\316\11!\16\35>\204H\0\317\320\321\11D\"\210\11\211\36\36\322\fI\210)\13\203[\0\307\323\11\f#\210\n\203e\0\307\324\11\f#\210\f\325\267\202\211\0\326 \210\307\327\11\"\210\202\211\0\330 \210\307\331\11\"\210\202\211\0\332 \210\307\333\11\"\210\307\334\11\f#*\207" [steps step last first status success -last-item run-hook-with-args ecukes-reporter-before-first-step-hook ecukes-reporter-before-last-step-hook ecukes-reporter-before-step-hook ecukes-run-step failure skipped type-of signal wrong-type-argument ecukes-step 7 ecukes-reporter-after-first-step-hook ecukes-reporter-after-last-step-hook #s(hash-table size 3 test eq rehash-size 1.5 rehash-threshold 0.8125 purecopy t data (success 107 failure 118 skipped 129)) ecukes-stats-step-pass ecukes-reporter-after-step-success-hook ecukes-stats-step-fail ecukes-reporter-after-step-failed-hook ecukes-stats-step-skip ecukes-reporter-after-step-skipped-hook ecukes-reporter-after-step-hook cl-struct-ecukes-step-tags v] 5])
  ecukes-run-steps((#s(ecukes-step "Given store \"Phones\" in directory \"store/phones\" with headlines" "Given" "store \"Phones\" in directory \"store/phones\" with headlines" "* iPhone 3 :Apple:\n* iPhone 7 :Apple:\n* Йотафон :Trash:" py-string nil success) #s(ecukes-step "When I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" "When" "I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" nil regular nil success) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "And I go to headline \"iPhone 3\"" "And" "I go to headline \"iPhone 3\"" nil regular nil nil) #s(ecukes-step "And I set title of headline at point to \"iPhone 4\"" "And" "I set title of headline at point to \"iPhone 4\"" nil regular nil nil) #s(ecukes-step "Then 1 marker should be changed" "Then" "1 marker should be changed" nil regular nil nil) #s(ecukes-step "When I commit changes" "When" "I commit changes" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should contain headline \"iPhone 4\" in committed layer" "Then" "store \"Phones\" should contain headline \"iPhone 4\" in committed layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"Йотафон\" in staging layer" "And" "store \"Phones\" should not contain headline \"Йотафон\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should be equal to buffer store" "And" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil) #s(ecukes-step "When I kill current buffer" "When" "I kill current buffer" nil regular nil nil) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should be equal to buffer store" "Then" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil)) t)
  ecukes-run-scenario(#s(ecukes-scenario "Basic functionality" (#s(ecukes-step "Given store \"Phones\" in directory \"store/phones\" with headlines" "Given" "store \"Phones\" in directory \"store/phones\" with headlines" "* iPhone 3 :Apple:\n* iPhone 7 :Apple:\n* Йотафон :Trash:" py-string nil success) #s(ecukes-step "When I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" "When" "I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" nil regular nil success) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "And I go to headline \"iPhone 3\"" "And" "I go to headline \"iPhone 3\"" nil regular nil nil) #s(ecukes-step "And I set title of headline at point to \"iPhone 4\"" "And" "I set title of headline at point to \"iPhone 4\"" nil regular nil nil) #s(ecukes-step "Then 1 marker should be changed" "Then" "1 marker should be changed" nil regular nil nil) #s(ecukes-step "When I commit changes" "When" "I commit changes" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should contain headline \"iPhone 4\" in committed layer" "Then" "store \"Phones\" should contain headline \"iPhone 4\" in committed layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"Йотафон\" in staging layer" "And" "store \"Phones\" should not contain headline \"Йотафон\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should be equal to buffer store" "And" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil) #s(ecukes-step "When I kill current buffer" "When" "I kill current buffer" nil regular nil nil) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should be equal to buffer store" "Then" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil)) ("debug")) t)
  #[(scenario) "\306\10\11\"\203f\0\10@\11\232\307\10!\11\232\32\33\f\203\31\0\310 \210\15\203*\0\16\25\203*\0\f\203*\0\311\15!\210\13\2033\0\312\313\11\"\210\n\203<\0\312\314\11\"\210\312\315\11\"\210\316\11\16\25\"\210\13\203P\0\312\317\11\"\210\n\203Y\0\312\320\11\"\210\312\321\11\"\210\322 \210\323\211\24*\207\312\324\11\"\207" [scenarios scenario last first background-should-run background -contains\? -last-item ecukes-hooks-run-before ecukes-run-background-steps run-hook-with-args ecukes-reporter-before-first-scenario-hook ecukes-reporter-before-last-scenario-hook ecukes-reporter-before-scenario-hook ecukes-run-scenario ecukes-reporter-after-first-scenario-hook ecukes-reporter-after-last-scenario-hook ecukes-reporter-after-scenario-hook ecukes-hooks-run-after t ecukes-reporter-pending-scenario-hook background-success] 3](#s(ecukes-scenario "Basic functionality" (#s(ecukes-step "Given store \"Phones\" in directory \"store/phones\" with headlines" "Given" "store \"Phones\" in directory \"store/phones\" with headlines" "* iPhone 3 :Apple:\n* iPhone 7 :Apple:\n* Йотафон :Trash:" py-string nil success) #s(ecukes-step "When I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" "When" "I create view \"Apple Phones\" from \"Apple\" \"Phones\" in \"views/apple.org\"" nil regular nil success) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "And I go to headline \"iPhone 3\"" "And" "I go to headline \"iPhone 3\"" nil regular nil nil) #s(ecukes-step "And I set title of headline at point to \"iPhone 4\"" "And" "I set title of headline at point to \"iPhone 4\"" nil regular nil nil) #s(ecukes-step "Then 1 marker should be changed" "Then" "1 marker should be changed" nil regular nil nil) #s(ecukes-step "When I commit changes" "When" "I commit changes" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should contain headline \"iPhone 4\" in committed layer" "Then" "store \"Phones\" should contain headline \"iPhone 4\" in committed layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 4\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" "And" "store \"Phones\" should not contain headline \"iPhone 3\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should not contain headline \"Йотафон\" in staging layer" "And" "store \"Phones\" should not contain headline \"Йотафон\" in staging layer" nil regular nil nil) #s(ecukes-step "And store \"Phones\" should be equal to buffer store" "And" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil) #s(ecukes-step "When I kill current buffer" "When" "I kill current buffer" nil regular nil nil) #s(ecukes-step "And I find file \"views/apple.org\"" "And" "I find file \"views/apple.org\"" nil regular nil nil) #s(ecukes-step "Then store \"Phones\" should be equal to buffer store" "Then" "store \"Phones\" should be equal to buffer store" nil regular nil nil) #s(ecukes-step "And view \"Apple Phones\" should be equal to buffer view" "And" "view \"Apple Phones\" should be equal to buffer view" nil regular nil nil)) ("debug")))
  mapc(#[... "\306\10\11\"\203f\0\10@\11\232\307\10!\11\232\32\33\f\203\31\0\310 \210\15\203*\0\16\25\203*\0\f\203*\0\311\15!\210\13\2033\0\312\313\11\"\210\n\203<\0\312\314\11\"\210\312\315\11\"\210\316\11\16\25\"\210\13\203P\0\312\317\11\"\210\n\203Y\0\312\320\11\"\210\312\321\11\"\210\322 \210\323\211\24*\207\312\324\11\"\207" [scenarios scenario last first background-should-run background -contains\? -last-item ecukes-hooks-run-before ecukes-run-background-steps run-hook-with-args ecukes-reporter-before-first-scenario-hook ecukes-reporter-before-last-scenario-hook ecukes-reporter-before-scenario-hook ...] 3] (#s(ecukes-scenario "Basic functionality" ... ...) #s(ecukes-scenario "Simple changes" ... nil) #s(ecukes-scenario "Change headline todo state" ... nil) #s(ecukes-scenario "Change headline tags" ... nil) #s(ecukes-scenario "Change headline title without changing todo state" ... nil) #s(ecukes-scenario "Change headline title with changing todo state (STARTED state is not registered)" ... nil) #s(ecukes-scenario "Change headline contents" ... nil) #s(ecukes-scenario "Sync commented headlines" ... nil) #s(ecukes-scenario "Real-time sync in live buffers" ... nil) #s(ecukes-scenario "Sync on read" ... nil) #s(ecukes-scenario "Multiple views, modifications across buffers" ... nil) #s(ecukes-scenario "Multiple views, modifications across files" ... nil)))
  -each((#s(ecukes-scenario "Basic functionality" ... ...) #s(ecukes-scenario "Simple changes" ... nil) #s(ecukes-scenario "Change headline todo state" ... nil) #s(ecukes-scenario "Change headline tags" ... nil) #s(ecukes-scenario "Change headline title without changing todo state" ... nil) #s(ecukes-scenario "Change headline title with changing todo state (STARTED state is not registered)" ... nil) #s(ecukes-scenario "Change headline contents" ... nil) #s(ecukes-scenario "Sync commented headlines" ... nil) #s(ecukes-scenario "Real-time sync in live buffers" ... nil) #s(ecukes-scenario "Sync on read" ... nil) #s(ecukes-scenario "Multiple views, modifications across buffers" ... nil) #s(ecukes-scenario "Multiple views, modifications across files" ... nil)) #[... "\306\10\11\"\203f\0\10@\11\232\307\10!\11\232\32\33\f\203\31\0\310 \210\15\203*\0\16\25\203*\0\f\203*\0\311\15!\210\13\2033\0\312\313\11\"\210\n\203<\0\312\314\11\"\210\312\315\11\"\210\316\11\16\25\"\210\13\203P\0\312\317\11\"\210\n\203Y\0\312\320\11\"\210\312\321\11\"\210\322 \210\323\211\24*\207\312\324\11\"\207" [scenarios scenario last first background-should-run background -contains\? -last-item ecukes-hooks-run-before ecukes-run-background-steps run-hook-with-args ecukes-reporter-before-first-scenario-hook ecukes-reporter-before-last-scenario-hook ecukes-reporter-before-scenario-hook ...] 3])
  ecukes-run-feature(#s(ecukes-feature #s(ecukes-intro "Consistent Edit" nil) nil nil ...))
  #[(feature) "\10@\11=\304\10!\11=\32\211\33\203\24\0\305\306\11\"\210\n\203\35\0\305\307\11\"\210\305\310\11\"\210\311\11!\210\13\203/\0\305\312\11\"\210\n\2038\0\305\313\11\"\210\305\314\11\"*\207" [ecukes-features feature last first -last-item run-hook-with-args ecukes-reporter-before-first-feature-hook ecukes-reporter-before-last-feature-hook ecukes-reporter-before-feature-hook ecukes-run-feature ecukes-reporter-after-first-feature-hook ecukes-reporter-after-last-feature-hook ecukes-reporter-after-feature-hook] 4](#s(ecukes-feature #s(ecukes-intro "Consistent Edit" nil) nil nil ...))
  mapc(#[... "\10@\11=\304\10!\11=\32\211\33\203\24\0\305\306\11\"\210\n\203\35\0\305\307\11\"\210\305\310\11\"\210\311\11!\210\13\203/\0\305\312\11\"\210\n\2038\0\305\313\11\"\210\305\314\11\"*\207" [ecukes-features feature last first -last-item run-hook-with-args ecukes-reporter-before-first-feature-hook ecukes-reporter-before-last-feature-hook ecukes-reporter-before-feature-hook ecukes-run-feature ecukes-reporter-after-first-feature-hook ecukes-reporter-after-last-feature-hook ecukes-reporter-after-feature-hook] 4] (#s(ecukes-feature #s(ecukes-intro "Consistent Edit" nil) nil nil ...) #s(ecukes-feature #s(ecukes-intro "Headline" nil) nil nil ...) #s(ecukes-feature #s(ecukes-intro "Store" nil) nil nil ...)))
  -each((#s(ecukes-feature #s(ecukes-intro "Consistent Edit" nil) nil nil ...) #s(ecukes-feature #s(ecukes-intro "Headline" nil) nil nil ...) #s(ecukes-feature #s(ecukes-intro "Store" nil) nil nil ...)) #[... "\10@\11=\304\10!\11=\32\211\33\203\24\0\305\306\11\"\210\n\203\35\0\305\307\11\"\210\305\310\11\"\210\311\11!\210\13\203/\0\305\312\11\"\210\n\2038\0\305\313\11\"\210\305\314\11\"*\207" [ecukes-features feature last first -last-item run-hook-with-args ecukes-reporter-before-first-feature-hook ecukes-reporter-before-last-feature-hook ecukes-reporter-before-feature-hook ecukes-run-feature ecukes-reporter-after-first-feature-hook ecukes-reporter-after-last-feature-hook ecukes-reporter-after-feature-hook] 4])
  ecukes-run-features((#s(ecukes-feature #s(ecukes-intro "Consistent Edit" nil) nil nil ...) #s(ecukes-feature #s(ecukes-intro "Headline" nil) nil nil ...) #s(ecukes-feature #s(ecukes-intro "Store" nil) nil nil ...)))
  ecukes-run(("/home/akatovda/Stuff/org-glance/features/consistent-edit.feature" "/home/akatovda/Stuff/org-glance/features/headline.feature" "/home/akatovda/Stuff/org-glance/features/view.feature"))
  (let (feature-files) (-each args #'(lambda (arg) (let ((path (f-expand arg ...))) (if (f-dir\? path) (-each (f-files path ... ...) #'...) (setq feature-files (cons path feature-files)))))) (ecukes-run feature-files))
  ecukes-cli/run("features")
  apply(ecukes-cli/run "features")
  commander--handle-command(nil)
  commander-parse(("--tags" "@debug"))
  (if commander-parsing-done nil (commander-parse (or commander-args (cdr command-line-args-left))))
  eval-buffer(#<buffer  *load*> nil "/home/akatovda/Stuff/org-glance/.cask/27.2/elpa/ecukes-20210202.1241/ecukes-cli.el" nil t)  ; Reading at buffer position 6618
  load-with-code-conversion("/home/akatovda/Stuff/org-glance/.cask/27.2/elpa/ecukes-20210202.1241/ecukes-cli.el" "/home/akatovda/Stuff/org-glance/.cask/27.2/elpa/ecukes-20210202.1241/ecukes-cli.el" nil t)
  load("/home/akatovda/Stuff/org-glance/.cask/27.2/elpa/ecukes-20210202.1241/ecukes-cli.el" nil t t)
  command-line-1(("-scriptload" "/home/akatovda/Stuff/org-glance/.cask/27.2/elpa/ecukes-20210202.1241/ecukes-cli.el"))
  command-line()
  normal-top-level()
