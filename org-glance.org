#+TITLE: org-glance
#+AUTHOR: Dmitry Akatov
#+EMAIL: akatovda@yandex.com
#+CATEGORY: org-glance
#+TAGS: License Documentation Feature Test
#+PROPERTY: header-args:emacs-lisp :noweb yes :tangle (cond ((seq-intersection '("Test") (org-get-tags-at)) "org-glance-tests.el") ((seq-intersection '("Feature" "License") (org-get-tags-at)) "yes") (t "no")) :results silent
#+PROPERTY: header-args:markdown :tangle (cond ((seq-intersection '("Documentation") (org-get-tags-at)) "README.md") (t "no"))
#+PROPERTY: header-args:org :tangle no


* Hello
** README                                                                      :Documentation:
#+BEGIN_SRC markdown
Org-glance: walk in the woods with pleasure
===============================

Fast, clean and convenient way of traversing your org-mode forest.

Turn org-mode into context-aware bookmark storage, password manager,
flexible build system or whatever you can imagine with ease.

## Running tests

### Batch mode

    emacs -batch -l ert -l org-glance-tests.el -f ert-run-tests-batch-and-exit

### Org-mode

Browse link `Setup development environment`. After that you can build
project using `C-x y m` key or running `org-glance-devtools/build`
command from `org-glance.org` buffer.
#+END_SRC
** License                                                                     :License:
#+BEGIN_SRC emacs-lisp
;;; org-glance.el --- org-mode traversing. Fast and convenient.

;; Copyright (C) 2018 Dmitry Akatov

;; Author: Dmitry Akatov <akatovda@yandex.com>
;; Created: 29 September, 2018
;; Version: 0.1

;; Keywords: org-mode tools
;; Homepage: https://github.com/rails-to-cosmos/org-glance

;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;; This package allows you to manage bookmarks and travel around the
;; digital world with an org-mode power behind your shoulders.

;;; Code:
#+END_SRC
* Requirements
** Implementation                                                              :Feature:
#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'cl-lib)
(require 'subr-x)
(require 'seq)

(defvar org-glance-cache-file (concat user-emacs-directory "org-glance/org-glance-cache.org"))

(condition-case nil
    (make-directory (file-name-directory org-glance-cache-file))
  (error nil))

(defvar org-glance-defaults--separator " → ")

(defun buffer-mode (&optional buffer-or-name)
  "Returns the major mode associated with a buffer.
If buffer-or-name is nil return current buffer's mode."
  (buffer-local-value 'major-mode
   (if buffer-or-name (get-buffer buffer-or-name) (current-buffer))))
#+END_SRC
** Testing                                                                     :Test:
#+BEGIN_SRC emacs-lisp
(require 'ert)
(load-file "org-glance.el") ;; for batch-mode
(require 'org-glance)
#+END_SRC

#+NAME: trim-string
#+BEGIN_SRC emacs-lisp
(defun trim-string (string)
  "Remove white spaces in beginning and ending of STRING.
White space here is any of: space, tab, emacs newline (line feed, ASCII 10)."
  (replace-regexp-in-string "\\`[ \t\n]*" "" (replace-regexp-in-string "[ \t\n]*\\'" "" string)))
#+END_SRC

#+NAME: with-temp-org-buffer
#+BEGIN_SRC emacs-lisp
(defmacro with-temp-org-buffer (s &rest forms)
  "Create a temporary org-mode buffer with contents S and execute FORMS."
  `(save-excursion
     (with-temp-buffer
       (org-mode)
       (goto-char 0)
       (insert ,s)
       (goto-char 0)
       ,@forms)))

(defmacro org-glance--with-temp-filebuffer (&rest body)
  "Open temp-file with org-glance prefix into a temporary buffer
execute BODY there like `progn', then kill the buffer and delete
the file returning the result of evaluating BODY."
  `(save-window-excursion
     (let ((fn (make-temp-file "org-glance-")))
       (find-file fn)
       (unwind-protect
           ,@body
         (save-buffer)
         (kill-buffer)
         (delete-file fn)))))

(defun org-glance-test (&rest args)
  (save-excursion
    (with-temp-buffer
      (org-mode)
      (let ((begin-marker (with-current-buffer (messages-buffer)
                            (point-max-marker)))
            (context (plist-get args :context))
            (expression (plist-get args :expression))
            (input (plist-get args :input)))

        (let* ((buffer (current-buffer))
               (org-confirm-elisp-link-function nil)
               (unread-command-events
                (listify-key-sequence
                 (kbd (format "%s RET" input)))))
          (insert (format "* [[elisp:%s][%s]]" (org-link-escape expression) input))
          (apply 'org-glance context))

        (string= (format "%s => %s" expression (eval (read expression)))
                 (trim-string
                  (-last-item
                   (butlast
                    (s-lines
                     (with-current-buffer (messages-buffer)
                       (buffer-substring begin-marker (point-max))))))))))))
#+END_SRC
* Features
** TODO org-glance                                                             :Feature:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun org-glance (&rest args)
  "Use optional ARGS to customize your glancing blows:
- SCOPE :: org-file or SCOPE from org-map-entries (org.el)
- PROMPT :: completing read title (default: \"Glance: \")
- SEPARATOR :: completing read entry separator (default: \" → \")
- FILTER :: list or one filter of type lambda/symbol/string to specify entries in completing read.

  Possible default filters:
  - links :: keep entries with link in title
  - encrypted :: keep entries with :crypt: tag

  You can customize default filters by setting org-glance/default-filters variable.

- ACTION
  - if specified, call it with point on selected entry
  - if entry has an org-link in title, browse it
- HANDLER :: property name to read-eval on select (default: \"HANDLER\")
- OUTLINE-IGNORE :: list of strings to ignore in outline-path

- INPLACE :: do not build scope file if specified

\(fn [:scope SCOPE] [:prompt PROMPT] [:separator SEPARATOR] [:filter FILTER] [:action ACTION] [:handler HANDLER])"
  (let* ((user-scopes (or (plist-get args :scope)          nil))
         (aggregated-scopes (org-glance--aggregate-scopes user-scopes))

         (user-filter (or (plist-get args :filter)       (lambda () t)))
         (filters (org-glance--filter-predicates user-filter))

         (outline-ignore (or (plist-get args :outline-ignore) nil))

         ;; user predicates
         (save-outline-visibility-p (plist-get args :save-outline-visibility))
         (inplace-p                 (plist-get args :inplace))
         (no-cache-file-p           (plist-get args :no-cache-file))

         (org-glance-cache-file (if no-cache-file-p
                                    (make-temp-file "org-glance-")
                                  org-glance-cache-file))

         (handler   (or (plist-get args :handler)        "HANDLER"))
         (prompt    (or (plist-get args :prompt)         "Glance: "))
         (separator (or (plist-get args :separator)      " → "))
         (action    (or (plist-get args :action)         nil))

         (entries (org-glance--entries
                   :scope aggregated-scopes
                   :separator separator
                   :outline-ignore outline-ignore
                   :filters filters
                   :inplace inplace-p))
         (-> (when (not entries) nil (error "Nothing to glance for %s"
                                            (prin1-to-string aggregated-scopes)))))
    (org-glance/compl-map prompt entries action save-outline-visibility-p)
    (when no-cache-file-p
      (when-let ((fb (get-file-buffer org-glance-cache-file)))
        (with-current-buffer fb
          (kill-buffer)))
      (delete-file org-glance-cache-file))))
#+END_SRC

** TODO outliner                                                               :Feature:

#+BEGIN_SRC emacs-lisp
(defun org-glance--get-entry-coordinates (&rest args)
  "Return outline path of current `'org-mode`' entry.

Org node titles separated by SEPARATOR, titles specified in
OUTLINE-IGNORE will be ignored.

All FILTERS lambdas must be t."
  (let* ((separator           (or (plist-get args :separator)           org-glance-defaults--separator))
         (outline-ignore      (or (plist-get args :outline-ignore)      nil))
         (filters             (or (plist-get args :filters)             nil))
         (inplace-p           (or (plist-get args :inplace)             nil))
         (file-or-buffer      (or (plist-get args :file-or-buffer)      nil))

         (item (org-entry-get (point) "ITEM"))
         (path (funcall (if inplace-p 'append 'cdr) (org-get-outline-path t)))
         (outline (cl-set-difference path outline-ignore :test 'string=))
         (title (mapconcat 'identity outline separator)))
    (when (and (cl-every (lambda (fp) (if fp (funcall fp) nil)) filters)
               (not (string-empty-p (s-trim title))))
      (list title (point) file-or-buffer))))
#+END_SRC

** TODO cache                                                                  :Feature:
*** add-scope

#+BEGIN_SRC emacs-lisp
(defun org-glance-cache--add-scope (&rest args)
  (let* ((scope (plist-get args :scope))
         (-> (assert (plist-member args :scope) nil "Specify :scope to cache it."))
         (entries (or (plist-get args :entries) nil))
         (state (or (plist-get args :state) nil)))
    (loop for (title level) in entries
          for i below (length entries)
          with prev-level
          initially (progn
                      (goto-char (point-max))
                      (org-insert-heading nil nil t)
                      (insert scope)
                      (org-set-property "CREATED" (current-time-string))
                      (org-set-property "STATE" state)
                      (org-insert-heading-respect-content)
                      (org-do-demote))
          do (progn
               (insert title)
               (when prev-level
                 (cond ((> prev-level level) (dotimes (ld (- prev-level level)) (org-do-promote)))
                       ((< prev-level level) (dotimes (ld (- level prev-level)) (org-do-demote))))))
          when (< (+ i 1) (length entries))
          do (progn
               (org-insert-heading-respect-content)
               (setq prev-level level)))))
#+END_SRC

*** get-scope

#+BEGIN_SRC emacs-lisp
(defun org-glance-cache--get-scope (scope-name)
  (car
   (org-element-map (org-element-parse-buffer 'headline) 'headline
     (lambda (hl)
       (let* (
              ;; maybe map properties?
              ;; (org-element-map hl 'node-property
              ;;   (lambda (np)
              ;;     (cons (org-element-property :key np)
              ;;           (org-element-property :value np))))

              (level (org-element-property :level hl))
              (title (org-element-property :title hl))
              (begin (org-element-property :begin hl))

              (end (org-element-property :end hl)))
         (when (and (= level 1) (string= title scope-name))
           (save-excursion
             (goto-char begin)
             (let* ((props (org-element--get-node-properties))
                    (state (plist-get props :STATE)))
               (org-set-property "USED" (current-time-string))
               (list state begin end)))))))))
#+END_SRC

*** delete-scope

#+BEGIN_SRC emacs-lisp
(defun org-glance-cache--remove-scope (scope-name)
  (when-let (scope (org-glance-cache--get-scope scope-name))
    (delete-region (cadr scope) (caddr scope))))
#+END_SRC

*** insert-contents

#+BEGIN_SRC emacs-lisp
(defun org-glance-cache--insert-contents (fob scope-type)
  (case scope-type
    ('file (insert-file-contents fob))
    ('file-buffer (insert-file-contents (buffer-file-name fob)))
    ('buffer (insert-buffer-substring-no-properties fob))))
#+END_SRC

*** read-contents

#+BEGIN_SRC emacs-lisp
(defun org-glance-cache--read-contents (fob scope-type)
  (case scope-type
      ('file (find-file fob))
      ('file-buffer (switch-to-buffer fob))
      ('buffer (switch-to-buffer fob))))
#+END_SRC

** TODO entries                                                                :Feature:

#+BEGIN_SRC emacs-lisp
(defun org-glance--entries (&rest args)
  "Return glance entries by SCOPE.

Specify SEPARATOR and OUTLINE-IGNORE to customize
outline-paths appearence.

When INPLACE flag specified, do not modify *org-glance-scope* buffer.

Add some FILTERS to filter unwanted entries."
  (let* ((scope               (or (plist-get args :scope)               (list (current-buffer))))
         (-> (assert (listp scope) nil "Scope must be instance of list."))

         (separator           (or (plist-get args :separator)           org-glance-defaults--separator))
         (outline-ignore      (or (plist-get args :outline-ignore)      nil))
         (inplace-p           (or (plist-get args :inplace)             nil))
         (filters             (or (plist-get args :filters)             nil))

         ;; Possible beautify and optimization: switch to opened buffer instead of finding file
         ;; (live-buffers (remove nil (mapcar 'buffer-file-name (buffer-list))))

         (scope-type-getter (lambda (file-or-buffer)
                              (cond ((and (stringp file-or-buffer) (file-exists-p file-or-buffer)) 'file)
                                    ((and (bufferp file-or-buffer) (buffer-file-name file-or-buffer) (file-exists-p (buffer-file-name file-or-buffer))) 'file-buffer)
                                    ((bufferp file-or-buffer) 'buffer))))

         (scope-name-getter (lambda (file-or-buffer scope-type)
                              (s-trim
                               (case scope-type
                                 ('file (expand-file-name file-or-buffer))
                                 ('file-buffer (expand-file-name (buffer-file-name file-or-buffer)))
                                 ('buffer (buffer-name file-or-buffer))))))

         (implant (lambda (file-or-buffer scope-type)
                    (with-temp-file org-glance-cache-file
                      (org-mode)

                      (when (file-exists-p org-glance-cache-file)
                        (insert-file-contents org-glance-cache-file))

                      (let* ((contents (with-temp-buffer
                                        (org-mode)
                                        (org-glance-cache--insert-contents file-or-buffer scope-type)
                                        (list (buffer-hash) ;; state
                                              (org-map-entries  ;; entries
                                               (lambda () (let* ((element (org-element-at-point))
                                                            (title (org-element-property :title element))
                                                            (level (org-element-property :level element)))
                                                       (list title level)
                                                       ;; (when (every 'funcall filters)
                                                       ;;   (list title level))
                                                       ))))))
                             (entries (cadr contents))
                             (state (car contents))
                             (scope-name (funcall scope-name-getter file-or-buffer scope-type))
                             (cached-scope (org-glance-cache--get-scope scope-name)))

                        (when (and (or (not cached-scope) (not (string= state (car cached-scope))))
                                   (> (length entries) 0)
                                   (not (string= org-glance-cache-file scope-name)))
                          (org-glance-cache--remove-scope scope-name)
                          (org-glance-cache--add-scope
                           :scope scope-name
                           :entries entries
                           :state state)
                          ;; TODO: possible optimization/add-scope can return scope
                          (setq cached-scope (org-glance-cache--get-scope scope-name)))

                        (when-let ((scope-point (cadr cached-scope)))
                          (let ((outliner (apply-partially
                                           'org-glance--get-entry-coordinates
                                           :separator separator
                                           :outline-ignore outline-ignore
                                           :filters filters
                                           :inplace inplace-p
                                           :file-or-buffer org-glance-cache-file)))
                            (save-excursion
                              (goto-char scope-point)
                              (org-map-entries outliner nil 'tree))))))))

         (visitor (lambda (file-or-buffer scope-type)
                    (save-window-excursion
                      (let ((outliner
                             (apply-partially
                              'org-glance--get-entry-coordinates
                              :separator separator
                              :outline-ignore outline-ignore
                              :filters filters
                              :inplace inplace-p
                              :file-or-buffer file-or-buffer)))
                        (org-glance-cache--read-contents file-or-buffer scope-type)
                        (org-map-entries outliner)))))

         (handler (if inplace-p visitor implant)))

    (loop for file-or-buffer in scope
          append (let* ((scope-type (funcall scope-type-getter file-or-buffer))
                        (entries (funcall handler file-or-buffer scope-type)))
                   (remove nil entries)))))
#+END_SRC

*** TODO Tests
** TODO sort-entries
*** Tests
**** classification problem
classes:
- i.e. bookmarks or passwords
- items must be normally distributed
- hashtable of items?

independent variables (normalization needed):
- (sxhash (buffer-hash))
- (point)
- (sxhash (substring-no-properties (thing-at-point 'line)))
- (sxhash (buffer-file-name))
- (sxhash (save-window-excursion (org-clock-goto) (substring-no-properties (thing-at-point 'line))))
- org-clock tags, properties
- buffer major mode

connections:
-

#+BEGIN_SRC emacs-lisp
;; (require 'eieio)

;; (defclass og-context (eieio-persistent)
;;   ((mode
;;     :type symbol
;;     :initarg :mode
;;     :initform (buffer-mode))

;;    (file
;;     :type string
;;     :initarg :file
;;     :initform "~/.context")

;;    (target
;;     :type string
;;     :initarg :target)

;;    (targets
;;     :type cl-hash-table
;;     :initform (make-hash-table :test 'equal)
;;     :allocation :class
;;     :documentation "Targets with features."))
;;   "Org-glance context.")

;; (cl-defmethod initialize-instance :after ((obj og-context) &rest _)
;;   (with-slots (mode target targets) obj
;;     (let* ((features (gethash target targets (make-hash-table :test 'equal)))
;;            (coeff (+ (gethash mode features 0) 1)))
;;       (puthash mode coeff features)
;;       (puthash target features targets))))

;; (require 'json)

;; ;; slots
;; (loop for slot in (eieio-class-slots og-context)
;;       collect (eieio-slot-descriptor-name slot))

;; ;; targets
;; (with-temp-file "~/.context"
;;   (insert (json-encode-hash-table (oref-default og-context targets))))

;; (json-read-file "~/.context")
#+END_SRC
** DONE compl-map                                                              :Feature:

#+BEGIN_SRC emacs-lisp
(defun org-glance/compl-map (prompt entries action &optional save-outline-visibility-p)
  "PROMPT org-completing-read on ENTRIES and call ACTION on selected.
If there are no entries, raise exception."
  (let* ((entries-count (length entries))
         (choice (cond
                  ((= entries-count 0) (error "Empty set."))
                  (t (org-completing-read prompt entries))))

         (data (assoc-string choice entries))
         (point (cadr data))
         (file-or-buffer (caddr data))

         (visitor (lambda () (let ((point (goto-char point)))
                          (if action
                              (funcall action)
                            (let* ((line (thing-at-point 'line t))
                                   (search (string-match org-any-link-re line))
                                   (link (substring line (match-beginning 0) (match-end 0))))
                              (org-open-link-from-string link))))))

         (org-link-frame-setup (cl-acons 'file 'find-file org-link-frame-setup)))

    (if (bufferp file-or-buffer)
        (with-current-buffer file-or-buffer
          (if save-outline-visibility-p
              (org-save-outline-visibility t
                (funcall visitor)))
          (funcall visitor))
      (with-current-buffer (find-file-noselect file-or-buffer t nil)
        (funcall visitor)))))
#+END_SRC

*** DONE Tests
**** DONE Can handle empty cache file                                        :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/can-work-with-empty-cache-file ()
  "Should work with empty cache file."
  (should
   (org-glance-test
    :context '(:no-cache-file t)
    :expression "(+ 1 5)"
    :input "Hello")))
#+END_SRC

**** DONE Can handle org-links                                               :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/can-handle-org-links ()
  "Test that we can handle org-links."
  (should
   (org-glance-test
    :context '(:no-cache-file t)
    :expression "(+ 1 7)"
    :input "elisp-link")))
#+END_SRC

**** DONE Can complete non-file-visiting buffers                             :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/compl-non-file-buffer ()
  "Should work properly from non-file buffers."
  (should
   (org-glance-test
    :context '(:no-cache-file t
               :inplace t
               :scope (list buffer))
    :expression "(+ 13 17)"
    :input "elisp-link")))
#+END_SRC

** TODO scoping                                                                :Feature:

#+BEGIN_SRC emacs-lisp
(defun org-glance--aggregate-scopes (&optional scopes)
  "Provides list of scopes (scope may be buffer or existing file).
Without specifying SCOPES it returns list with current buffer."

  (let* ((scopes (cond ((or (stringp scopes)
                            (and (symbolp scopes)
                                 (not (null scopes))))
                        (list scopes))
                       (t scopes)))

         (ascopes (cl-loop for scope in scopes

                           ;; collect buffers
                           when (bufferp scope)
                           collect scope

                           ;; collect functions that return buffers or filenames
                           when (functionp scope)
                           collect (when-let ((fob (funcall scope)))
                                     (if (bufferp fob)
                                         fob
                                       (or (get-file-buffer (expand-file-name fob))
                                           (expand-file-name fob))))

                           ;; collect file names
                           when (and (stringp scope) (file-exists-p (expand-file-name scope)))
                           collect (or (get-file-buffer (expand-file-name scope))
                                       (expand-file-name scope)))))

    (or (remove 'nil (seq-uniq ascopes))
        (list (current-buffer)))))
#+END_SRC

*** TODO Tests
**** DONE Return must contain no duplicates                                  :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/scopes-contain-no-duplicates ()
  "Scope should not contain duplicates."
  (let ((scopes
         (org-glance--with-temp-filebuffer
          (org-glance--aggregate-scopes
           (list
            ;; buffer
            (current-buffer)

            ;; filename
            (buffer-file-name)

            ;; function that returns buffer
            'current-buffer

            ;; function that returns filename
            'buffer-file-name)))))
    (should (= (length scopes) 1))))
#+END_SRC

**** DONE Proper handling lambda with nil return                             :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/scopes-can-handle-nil-lambdas ()
  "Ignore nil lambdas in scopes."
  (should
   (not (null
         (condition-case nil
             (org-glance--aggregate-scopes (list (lambda () nil)))
           (error nil))))))
#+END_SRC

**** TODO Input must handle scopes of types: buffer, fun, filename
**** TODO Proper handle nil input
** DONE filtering                                                              :Feature:

#+BEGIN_SRC emacs-lisp
(defvar org-glance/default-filters
  '((links . (lambda () (org-match-line (format "^.*%s.*$" org-bracket-link-regexp))))
    (encrypted . (lambda () (seq-intersection (list "crypt") (org-get-tags-at))))))

(defun org-glance--filter-predicates (filter)
  "Factorize FILTER into list of predicates. Acceptable FILTER values:
- list of symbols (possible default filters) and lambdas (custom filters)
- string name of default filter
- symbolic name of default filter
- lambda function with no params called on entry"
  (cond ((functionp filter) (list filter))
        ((symbolp filter) (list (alist-get filter org-glance/default-filters)))
        ((stringp filter) (list (alist-get (intern filter) org-glance/default-filters)))
        ((listp filter) (cl-loop for elt in filter
                                 when (functionp elt) collect elt
                                 when (symbolp elt)   collect (alist-get elt org-glance/default-filters)
                                 when (stringp elt)   collect (alist-get (intern elt) org-glance/default-filters)))
        (t (error "Unable to recognize filter."))))
#+END_SRC

*** DONE Tests
**** DONE Filter produces proper predicates                                  :Test:

#+BEGIN_SRC emacs-lisp
(defun org-glance-req/filter-produces-proper-predicates-p (input expected)
  "Can we split user filter into atomic predicates?"
  (equal (org-glance--filter-predicates input) expected))

(defun org-glance-test-explainer/filter-produces-proper-predicates (filter expected)
  (cond ((functionp filter) "Unable to resolve lambda filter")
        ((symbolp filter) "Unable to resolve symbolic filter")
        ((stringp filter) "Unable to resolve string filter")
        ((listp filter) (cl-loop for elt in filter
                                 when (functionp elt) return "Unable to resolve lambda from filter list"
                                 when (symbolp elt)   return "Unable to resolve symbol from filter list"
                                 when (stringp elt)   return "Unable to resolve string from filter list"))
        (t "Unrecognized filter must raise an error")))

(put 'org-glance-req/filter-produces-proper-predicates-p
     'ert-explainer
     'org-glance-test-explainer/filter-produces-proper-predicates)

(ert-deftest org-glance-test/filter-produces-proper-predicates-lambda ()
  (should (org-glance-req/filter-produces-proper-predicates-p
           (lambda () t) '((lambda () t)))))

(ert-deftest org-glance-test/filter-produces-proper-predicates-symbol ()
  (should (org-glance-req/filter-produces-proper-predicates-p
           'links (list (alist-get 'links org-glance/default-filters)))))

(ert-deftest org-glance-test/filter-produces-proper-predicates-string ()
  (should (org-glance-req/filter-produces-proper-predicates-p
           "links" (list (alist-get 'links org-glance/default-filters)))))

(ert-deftest org-glance-test/filter-produces-proper-predicates-list ()
  (should (org-glance-req/filter-produces-proper-predicates-p
           (list 'links (lambda () t) "links")
           (list (alist-get 'links org-glance/default-filters)
                 (lambda () t)
                 (alist-get 'links org-glance/default-filters)))))
#+END_SRC

**** DONE Filter removes entries                                             :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/filter-removes-entries ()
  "Test filtering."
  (should
   (condition-case nil
        (org-glance-test
         :context (list :no-cache-file t
                        :inplace t
                        :filter (lambda () (org-match-line "^ example$")))
         :expression "(+ 1 5)"
         :input "elisp-link")
     (error t))))
#+END_SRC

**** DONE Filter doesnt remove suitable entries                              :Test:

#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/filter-doesnt-remove-suitable-entries ()
  (should
   (org-glance-test
    :context (list :no-cache-file t
                   :inplace t
                   :filter (lambda () (org-match-line "^.*elisp-link.*$")))
    :expression "(+ 1 5)"
    :input "elisp-link")))
#+END_SRC

** DONE provide                                                                :Feature:

#+BEGIN_SRC emacs-lisp
(provide 'org-glance)
;;; org-glance.el ends here
#+END_SRC

*** DONE Tests
**** DONE feature-provision                                                  :Test:
#+BEGIN_SRC emacs-lisp
(ert-deftest org-glance-test/feature-provision ()
  (should (featurep 'org-glance)))
#+END_SRC
* Applications
** org-glance-snippets
** org-glance-passwords
** org-glance-bookmarks
** org-glance-fs
* Todo
** TODO Use org-current-tag-alist
** TODO cache properties
** TODO profiler-start/profiler-report analyze
** TODO Fix fast insertion error (org-glance-cache-file does not have time to create)
* Settings
# Local Variables:
# org-literate-test-buffer: "*org-glance-tests*"
# org-literate-test-selector: "^org-glance-test/"
# org-use-tag-inheritance: t
# org-src-preserve-indentation: t
# org-adapt-indentation: nil
# indent-tabs-mode: nil
# End:
