# Iâ€™ve always thought they were lighthouses

* TODO materialization (org-get-todo-state)
#+begin_src emacs-lisp
(let ((dst "/tmp/store"))
  (f-delete dst t)
  ;; (setq test-store
;;         (-> (org-glance-store-from-scratch dst
;;               "* TODO a :Task:
;; 1"
;;               "* DONE b :TAsk:"
;;               "* COMMENT c
;; aes-encrypted V 1.3-OCB-B-4-4-M
;; 1/tktn7J+sRqmM2KLefQQZtIYV/FAOcDn+Rs/s5Nm17pNMFtusnXrgrjwzxWFk8F4YSBdCbbRwzl
;; wUVErGnLFnK5LJ17kYnL18iRTAGhEhUQqyxXqB3DQ/41"
;;               "* COMMENT a
;; 2")))
  )

(let ((expected-class "Human")
      (store (org-glance-store-from-scratch "/tmp/store"
               "* Yummi :Pomeranian:"
               "* Tanik :Human:"
               "* Eric :Pomeranian:")))
  (org-glance-store:filter
   store
   (lambda (headline)
     (member
      (downcase expected-class)
      (org-glance-headline-class headline)))))

(let ((dst "/tmp/store"))
  (f-delete dst t)
  (setq test-store (org-glance-store-from-scratch dst
                     "* TODO a :Task:
1"
                     "* DONE b :TAsk:"
                     "* COMMENT c
aes-encrypted V 1.3-OCB-B-4-4-M
1/tktn7J+sRqmM2KLefQQZtIYV/FAOcDn+Rs/s5Nm17pNMFtusnXrgrjwzxWFk8F4YSBdCbbRwzl
wUVErGnLFnK5LJ17kYnL18iRTAGhEhUQqyxXqB3DQ/41"
                     "* COMMENT a
2"))
  ;; emulate source destruction
  ;; (append-to-file "* d" nil (f-join dst "main.org"))
  )

(org-glance-store-staged-changes test-store)
(org-glance-store-committed-changes test-store)

(org-glance-store:flush test-store)

(length (org-glance-log:flatten (org-glance-store-staged-changes test-store)))
(length (org-glance-log:flatten (org-glance-store-committed-changes test-store)))

(let ((store (org-glance-store-from-scratch "/tmp/store"
               "* a"
               "* b")))
  (cl-assert (= 2 (length (org-glance-log:flatten (org-glance-store-staged-changes store)))))
  (cl-assert (= 0 (length (org-glance-log:flatten (org-glance-store-committed-changes store)))))
  (org-glance-materialize store "/tmp/store/material.org"))

(org-glance-store:put test-store (org-glance-headline-from-string "* a"))
(org-glance-store:remove test-store (org-glance-headline-from-string "* a"))
(org-glance-store-committed-changes test-store)
(org-glance-store:flush test-store)

(let ((store (org-glance-store "/tmp/store")))
  (org-glance-store:put store
                        (list (org-glance-headline-from-string "* TODO a"))))

(org-glance-store:read "/tmp/store")


(org-glance-store-wal test-store)
(org-glance-store-completing-read test-store)
(org-glance-store-completing-read (org-glance-store:read "/tmp/store"))

(org-glance-store-wal (org-glance-store:read "/tmp/store"))

(org-glance-store--title->hash test-store)
(org-glance-store--state->hash test-store)
(org-glance-store--class->hash test-store)
(org-glance-store--commented->hash test-store)
(org-glance-store-wal test-store)

(setq test-store2 (org-glance-store "/tmp/store"))

(org-glance-store-from-scratch "/tmp/store"
  "* TODO a :Task:
1"
  "* DONE b :TAsk:"
  "* COMMENT c :task:"
  "* COMMENT a
2")

(org-glance-headline-commented-p (org-glance-headline-header (org-glance-headline-from-string "* COMMENT a :task:")))
#+end_src

* avl tree
#+begin_src emacs-lisp
(require 'avl-tree)

(cl-defstruct test-hl
  (a nil :type string :read-only nil)
  (b nil :type string :read-only nil))

(setq test-tree (avl-tree-create (lambda (a b) (string> (test-hl-a b)
                                                   (test-hl-a a))))
      h1 (make-test-hl :a "a" :b "1")
      h2 (make-test-hl :a "b" :b "2")
      h3 (make-test-hl :a "c" :b "3")
      h4 (make-test-hl :a "d" :b "4")
      h5 (make-test-hl :a "a" :b "5"))

(progn
  (avl-tree-enter test-tree h1)
  (avl-tree-enter test-tree h3)
  (avl-tree-enter test-tree h2)
  (avl-tree-enter test-tree h4))

(avl-tree-flatten test-tree)
(avl-tree-enter test-tree h5)

(avl-tree-stack test-tree)

(avl-tree--cmpfun test-tree)

(avl-tree--node-data (avl-tree--node-branch (avl-tree--dummyroot test-tree) 0))
#+end_src

* hash table
#+begin_src emacs-lisp
(setq test-hash (make-hash-table))

(puthash 'a 1 test-hash)
(puthash 'b 2 test-hash)

(maphash #'list test-hash)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (a 1 b 2))

* laziness
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(require 'thunk)

(defun lazy-test ()
  (interactive)
  (thunk-let ((a 1)
              (b (progn (message "side-effect!")
                        2)))
    (pp a)))

(lazy-test)
#+end_src
