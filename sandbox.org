# Iâ€™ve always thought they were lighthouses

* TODO materialization (org-get-todo-state)
#+begin_src emacs-lisp
(progn
  (f-delete "/tmp/store" t)
  (setq test-store
        (-> (org-glance-store-from-scratch "/tmp/store"
              "* a
1"
              "* b"
              "* c"
              "* a
2")
            (org-glance-materialize "/tmp/store/first.org")
            (org-glance-store-remove-headline-by-hash "6d0af4c806aa2a7d2573bd7f10137a40")
            ;; (org-glance-materialize "/tmp/store/second.org")
            ))
  (append-to-file "* d" nil "/tmp/store/first.org"))

(org-glance-store-hashes test-store)

(org-glance-store--title->hash test-store)
#+end_src

* avl tree
#+begin_src emacs-lisp
(require 'avl-tree)

(cl-defstruct test-hl
  (a nil :type string :read-only nil)
  (b nil :type string :read-only nil))

(setq test-tree (avl-tree-create (lambda (a b) (string> (test-hl-a b)
                                                   (test-hl-a a))))
      h1 (make-test-hl :a "a" :b "1")
      h2 (make-test-hl :a "b" :b "2")
      h3 (make-test-hl :a "c" :b "3")
      h4 (make-test-hl :a "d" :b "4")
      h5 (make-test-hl :a "a" :b "5"))

(progn
  (avl-tree-enter test-tree h1)
  (avl-tree-enter test-tree h3)
  (avl-tree-enter test-tree h2)
  (avl-tree-enter test-tree h4))

(avl-tree-flatten test-tree)
(avl-tree-enter test-tree h5)

(avl-tree-stack test-tree)

(avl-tree--cmpfun test-tree)

(avl-tree--node-data (avl-tree--node-branch (avl-tree--dummyroot test-tree) 0))
#+end_src

* hash table
#+begin_src emacs-lisp
(setq test-hash (make-hash-table))

(puthash 'a 1 test-hash)
(puthash 'b 2 test-hash)

(maphash #'list test-hash)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (a 1 b 2))

* laziness
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(require 'thunk)

(defun lazy-test ()
  (interactive)
  (thunk-let ((a 1)
              (b (progn (message "side-effect!")
                        2)))
    (pp a)))

(lazy-test)
#+end_src
